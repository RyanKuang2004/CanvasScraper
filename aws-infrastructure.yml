AWSTemplateFormatVersion: '2010-09-09'
Description: 'Canvas Scraper Infrastructure - EC2 with Docker'

Parameters:
  EnvironmentName:
    Description: Environment name prefix
    Type: String
    Default: canvas-scraper
    
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues: [t3.micro, t3.small, t3.medium]
    
  KeyPairName:
    Description: EC2 Key Pair name
    Type: String
    Default: canvas-scraper-keypair
    
  CanvasAPIToken:
    Description: Canvas API Token
    Type: String
    NoEcho: true
    
  SupabaseURL:
    Description: Supabase Project URL
    Type: String
    Default: ""
    
  SupabaseAnonKey:
    Description: Supabase Anonymous Key
    Type: String
    NoEcho: true
    Default: ""

Resources:
  # VPC and Networking
  CanvasVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref CanvasVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CanvasVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CanvasVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Group
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-SecurityGroup
      GroupDescription: Security group for Canvas Scraper EC2 instance
      VpcId: !Ref CanvasVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Restrict this to your IP in production
          Description: SSH access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-SecurityGroup

  # IAM Role for EC2
  CanvasScraperRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-EC2-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentName}/*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref CanvasScraperRole

  # SSM Parameters for secure configuration
  CanvasAPITokenParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${EnvironmentName}/canvas-api-token
      Type: SecureString
      Value: !Ref CanvasAPIToken
      Description: Canvas API Token for scraper

  SupabaseURLParameter:
    Type: AWS::SSM::Parameter
    Condition: HasSupabaseURL
    Properties:
      Name: !Sub /${EnvironmentName}/supabase-url
      Type: String
      Value: !Ref SupabaseURL
      Description: Supabase Project URL

  SupabaseAnonKeyParameter:
    Type: AWS::SSM::Parameter
    Condition: HasSupabaseAnonKey
    Properties:
      Name: !Sub /${EnvironmentName}/supabase-anon-key
      Type: SecureString
      Value: !Ref SupabaseAnonKey
      Description: Supabase Anonymous Key

  # EC2 Instance
  CanvasScraperInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI (us-east-1)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          
          # Install Docker
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          
          # Create application directory
          mkdir -p /home/ec2-user/canvas-scraper
          cd /home/ec2-user/canvas-scraper
          
          # Create docker-compose.yml
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            canvas-scraper:
              build: .
              container_name: canvas-scraper
              restart: unless-stopped
              environment:
                - CANVAS_API_TOKEN=${CanvasAPIToken}
                - SUPABASE_URL=${SupabaseURL}
                - SUPABASE_ANON_KEY=${SupabaseAnonKey}
              volumes:
                - ./logs:/app/logs
              logging:
                driver: awslogs
                options:
                  awslogs-group: !Sub ${EnvironmentName}-logs
                  awslogs-region: !Sub ${AWS::Region}
                  awslogs-stream: canvas-scraper
          EOF
          
          # Set ownership
          chown -R ec2-user:ec2-user /home/ec2-user/canvas-scraper
          
          # Install CloudWatch Agent
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          rpm -U ./amazon-cloudwatch-agent.rpm
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Instance

  # CloudWatch Log Group
  CanvasScraperLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-logs
      RetentionInDays: 14

Conditions:
  HasSupabaseURL: !Not [!Equals [!Ref SupabaseURL, ""]]
  HasSupabaseAnonKey: !Not [!Equals [!Ref SupabaseAnonKey, ""]]

Outputs:
  InstanceId:
    Description: Instance ID of the Canvas Scraper EC2 instance
    Value: !Ref CanvasScraperInstance
    Export:
      Name: !Sub ${EnvironmentName}-InstanceId

  InstancePublicIP:
    Description: Public IP address of the Canvas Scraper instance
    Value: !GetAtt CanvasScraperInstance.PublicIp
    Export:
      Name: !Sub ${EnvironmentName}-PublicIP

  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub 'ssh -i ~/.ssh/${KeyPairName}.pem ec2-user@${CanvasScraperInstance.PublicIp}'

  LogGroup:
    Description: CloudWatch Log Group for monitoring
    Value: !Ref CanvasScraperLogGroup
    Export:
      Name: !Sub ${EnvironmentName}-LogGroup