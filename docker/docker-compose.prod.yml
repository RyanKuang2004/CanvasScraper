# Production Docker Compose Configuration
# Optimized for production deployment with monitoring and security

version: '3.8'

services:
  #==========================================
  # Canvas Scraper - Production
  #==========================================
  canvas-scraper:
    image: canvas-scraper:latest
    container_name: canvas-scraper-prod
    restart: unless-stopped
    environment:
      # Canvas API Configuration
      - CANVAS_API_TOKEN=${CANVAS_API_TOKEN}
      - CANVAS_URL=${CANVAS_URL:-https://canvas.lms.unimelb.edu.au/api/v1}
      
      # Production Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_DIR=/app/logs
      
      # Enable cron for scheduled execution
      - ENABLE_CRON=${ENABLE_CRON:-true}
      - CRON_SCHEDULE=${CRON_SCHEDULE:-0 2 * * *}
      
      # Health monitoring
      - ENABLE_HEALTH_SERVER=true
      
      # Supabase integration (if configured)
      - SUPABASE_URL=${SUPABASE_URL:-}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY:-}
      
      # Production optimizations
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      # Persistent storage
      - canvas_prod_logs:/app/logs
      - canvas_prod_data:/app/data
      
      # Configuration (read-only)
      - ./.env:/app/.env:ro
      
      # Timezone
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "python", "/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    user: "canvas:canvas"
    networks:
      - canvas-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  #==========================================
  # Reverse Proxy (Optional)
  #==========================================
  nginx:
    image: nginx:alpine
    container_name: canvas-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - canvas-scraper
    networks:
      - canvas-prod-network
    profiles:
      - proxy

  #==========================================
  # Monitoring - Prometheus (Optional)
  #==========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: canvas-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - canvas-prod-network
    profiles:
      - monitoring

  #==========================================
  # Monitoring - Grafana (Optional)
  #==========================================
  grafana:
    image: grafana/grafana:latest
    container_name: canvas-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - canvas-prod-network
    profiles:
      - monitoring

  #==========================================
  # Log Aggregation - ELK Stack (Optional)
  #==========================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: canvas-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - canvas-prod-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: canvas-logstash
    restart: unless-stopped
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - canvas_prod_logs:/app/logs:ro
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - canvas-prod-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: canvas-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - canvas-prod-network
    profiles:
      - logging

#==========================================
# Production Volumes
#==========================================
volumes:
  canvas_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/canvas-scraper
  
  canvas_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/canvas-scraper
  
  nginx_logs:
    driver: local
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local
  
  elasticsearch_data:
    driver: local

#==========================================
# Production Network
#==========================================
networks:
  canvas-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: canvas-prod-br