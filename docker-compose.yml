version: '3.8'

services:
  #==========================================
  # Canvas Scraper Application
  #==========================================
  canvas-scraper:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: canvas-scraper
    restart: unless-stopped
    environment:
      # Canvas API Configuration
      - CANVAS_API_TOKEN=${CANVAS_API_TOKEN}
      - CANVAS_URL=${CANVAS_URL:-https://canvas.lms.unimelb.edu.au/api/v1}
      
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_DIR=/app/logs
      
      # Optional: Cron scheduling
      - ENABLE_CRON=${ENABLE_CRON:-false}
      - CRON_SCHEDULE=${CRON_SCHEDULE:-0 2 * * *}
      
      # Health check server
      - ENABLE_HEALTH_SERVER=${ENABLE_HEALTH_SERVER:-true}
      
      # Optional: Supabase integration
      - SUPABASE_URL=${SUPABASE_URL:-}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY:-}
    volumes:
      # Persistent log storage
      - canvas_logs:/app/logs
      
      # Data persistence (for downloaded files)
      - canvas_data:/app/data
      
      # Configuration override (optional)
      - ./.env:/app/.env:ro
    ports:
      # Health check endpoint
      - "8080:8080"
    healthcheck:
      test: ["CMD", "python", "/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - canvas-network

  #==========================================
  # Optional: PostgreSQL Database
  #==========================================
  postgres:
    image: postgres:15-alpine
    container_name: canvas-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-canvas_scraper}
      - POSTGRES_USER=${POSTGRES_USER:-canvas}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-canvas} -d ${POSTGRES_DB:-canvas_scraper}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - canvas-network
    profiles:
      - database

  #==========================================
  # Optional: Redis for Job Queue
  #==========================================
  redis:
    image: redis:7-alpine
    container_name: canvas-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - canvas-network
    profiles:
      - queue

  #==========================================
  # Development Environment
  #==========================================
  canvas-dev:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: canvas-dev
    environment:
      - CANVAS_API_TOKEN=${CANVAS_API_TOKEN}
      - CANVAS_URL=${CANVAS_URL:-https://canvas.lms.unimelb.edu.au/api/v1}
      - LOG_LEVEL=DEBUG
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      # Mount source code for live development
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./tests:/app/tests
      - ./database:/app/database
      
      # Development data
      - canvas_dev_logs:/app/logs
      - canvas_dev_data:/app/data
    ports:
      - "8081:8080"
    networks:
      - canvas-network
    profiles:
      - development

#==========================================
# Volumes
#==========================================
volumes:
  # Production volumes
  canvas_logs:
    driver: local
  canvas_data:
    driver: local
  
  # Database volumes
  postgres_data:
    driver: local
  redis_data:
    driver: local
  
  # Development volumes
  canvas_dev_logs:
    driver: local
  canvas_dev_data:
    driver: local

#==========================================
# Networks
#==========================================
networks:
  canvas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16