name: Deploy Canvas Scraper to AWS EC2

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: 3.11

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
        
    - name: Run linting
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Check code formatting
      run: |
        pip install black
        black --check .

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    runs-on: ubuntu-latest
    name: Build and Test Docker Image
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: canvas-scraper:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VERSION=${{ github.sha }}
          VCS_REF=${{ github.sha }}
          
    - name: Test Docker image
      run: |
        docker run --rm canvas-scraper:test python -c "from config import Config; print('Config validation passed')"

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [test, security-scan, docker-build]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to staging
      run: |
        cd deploy
        export CANVAS_API_TOKEN="${{ secrets.CANVAS_API_TOKEN_STAGING }}"
        ./deploy.sh canvas-scraper-staging ${{ env.AWS_REGION }}
        
    - name: Health check
      run: |
        # Get instance IP from CloudFormation output
        INSTANCE_IP=$(aws cloudformation describe-stacks \
          --stack-name canvas-scraper-staging-infrastructure \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicIP`].OutputValue' \
          --output text)
        
        # Wait for application to be ready
        for i in {1..30}; do
          if ssh -i ~/.ssh/canvas-scraper-staging-keypair.pem \
                 -o ConnectTimeout=5 \
                 -o StrictHostKeyChecking=no \
                 ec2-user@$INSTANCE_IP \
                 "sudo docker-compose ps | grep Up" &> /dev/null; then
            echo "Application is running!"
            break
          fi
          sleep 10
        done

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [test, security-scan, docker-build]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to production
      run: |
        cd deploy
        export CANVAS_API_TOKEN="${{ secrets.CANVAS_API_TOKEN_PRODUCTION }}"
        ./deploy.sh canvas-scraper-production ${{ env.AWS_REGION }}
        
    - name: Production health check
      run: |
        # Get instance IP from CloudFormation output
        INSTANCE_IP=$(aws cloudformation describe-stacks \
          --stack-name canvas-scraper-production-infrastructure \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicIP`].OutputValue' \
          --output text)
        
        # Comprehensive health check
        for i in {1..60}; do
          if ssh -i ~/.ssh/canvas-scraper-production-keypair.pem \
                 -o ConnectTimeout=5 \
                 -o StrictHostKeyChecking=no \
                 ec2-user@$INSTANCE_IP \
                 "sudo docker-compose ps | grep Up && sudo docker-compose logs --tail=5" &> /dev/null; then
            echo "Production deployment successful!"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "Production health check failed!"
            exit 1
          fi
          sleep 10
        done
        
    - name: Create release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        body: |
          ## Canvas Scraper Release ${{ github.ref_name }}
          
          **Deployment Details:**
          - Environment: Production
          - Region: ${{ env.AWS_REGION }}
          - Commit: ${{ github.sha }}
          - Deployed at: ${{ github.event.head_commit.timestamp }}
          
          **Infrastructure:**
          - CloudFormation Stack: canvas-scraper-production-infrastructure
          - Docker Image: canvas-scraper:${{ github.ref_name }}

  notify:
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
      run: |
        echo "✅ Deployment completed successfully!"
        
    - name: Notify on failure
      if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
      run: |
        echo "❌ Deployment failed!"
        exit 1