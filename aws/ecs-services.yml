# ECS Service Definitions for Canvas Scraper Enhanced with Assignments/Quizzes
# Multi-service architecture with auto-scaling and monitoring

version: '3.8'

services:
  # =====================================================
  # CANVAS ORCHESTRATOR SERVICE
  # =====================================================
  canvas-orchestrator:
    image: ${ECR_REPOSITORY_URI}:${IMAGE_TAG:-latest}
    cpu: 1024
    memory: 2048
    essential: true
    
    environment:
      - SERVICE_MODE=orchestrator
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CANVAS_API_TOKEN=${CANVAS_API_TOKEN}
      - CANVAS_URL=${CANVAS_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SQS_ASSESSMENT_QUEUE_URL=${SQS_ASSESSMENT_QUEUE_URL}
      - SQS_NOTIFICATION_QUEUE_URL=${SQS_NOTIFICATION_QUEUE_URL}
      - REDIS_ENDPOINT=${REDIS_ENDPOINT}
      - AWS_REGION=${AWS_REGION}
    
    logging:
      driver: awslogs
      options:
        awslogs-group: /ecs/canvas-scraper/orchestrator
        awslogs-region: ${AWS_REGION}
        awslogs-stream-prefix: orchestrator
    
    healthCheck:
      command: ["python", "/app/healthcheck.py", "--service", "orchestrator"]
      interval: 30s
      timeout: 10s
      retries: 3
      startPeriod: 60s
    
    # Task placement constraints for better distribution
    placementConstraints:
      - type: distinctInstance
    
    # Resource limits and reservations
    ulimits:
      nofile:
        soft: 1024
        hard: 2048

  # =====================================================
  # ASSESSMENT PROCESSOR SERVICE
  # =====================================================  
  assessment-processor:
    image: ${ECR_REPOSITORY_URI}:${IMAGE_TAG:-latest}
    cpu: 512
    memory: 1024
    essential: true
    
    environment:
      - SERVICE_MODE=assessment_processor
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CANVAS_API_TOKEN=${CANVAS_API_TOKEN}
      - CANVAS_URL=${CANVAS_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SQS_ASSESSMENT_QUEUE_URL=${SQS_ASSESSMENT_QUEUE_URL}
      - REDIS_ENDPOINT=${REDIS_ENDPOINT}
      - AWS_REGION=${AWS_REGION}
      - MAX_CONCURRENT_ASSESSMENTS=${MAX_CONCURRENT_ASSESSMENTS:-5}
      - CHUNK_SIZE=${CHUNK_SIZE:-1000}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP:-200}
    
    logging:
      driver: awslogs
      options:
        awslogs-group: /ecs/canvas-scraper/assessment-processor
        awslogs-region: ${AWS_REGION}
        awslogs-stream-prefix: assessment-processor
    
    healthCheck:
      command: ["python", "/app/healthcheck.py", "--service", "assessment_processor"]
      interval: 30s
      timeout: 10s
      retries: 3
      startPeriod: 30s
    
    # Multiple instances for parallel processing
    deploy:
      replicas: 3
      resources:
        reservations:
          cpus: '0.25'
          memory: 512M
        limits:
          cpus: '0.5'
          memory: 1024M
      
      # Auto-scaling configuration
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3

  # =====================================================
  # NOTIFICATION SERVICE
  # =====================================================
  notification-service:
    image: ${ECR_REPOSITORY_URI}:${IMAGE_TAG:-latest}
    cpu: 256
    memory: 512
    essential: true
    
    environment:
      - SERVICE_MODE=notifications
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SQS_NOTIFICATION_QUEUE_URL=${SQS_NOTIFICATION_QUEUE_URL}
      - EMAIL_PROVIDER=${EMAIL_PROVIDER:-ses}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - AWS_REGION=${AWS_REGION}
    
    logging:
      driver: awslogs
      options:
        awslogs-group: /ecs/canvas-scraper/notification-service
        awslogs-region: ${AWS_REGION}
        awslogs-stream-prefix: notification
    
    healthCheck:
      command: ["python", "/app/healthcheck.py", "--service", "notifications"]
      interval: 30s
      timeout: 10s
      retries: 3
      startPeriod: 30s
    
    # Lightweight service with minimal resources
    deploy:
      replicas: 1
      resources:
        reservations:
          cpus: '0.1'
          memory: 256M
        limits:
          cpus: '0.25'
          memory: 512M

  # =====================================================
  # SCHEDULER SERVICE
  # =====================================================
  scheduler-service:
    image: ${ECR_REPOSITORY_URI}:${IMAGE_TAG:-latest}
    cpu: 256
    memory: 512
    essential: true
    
    environment:
      - SERVICE_MODE=scheduler
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - TIMEZONE=Australia/Melbourne
      - SYNC_SCHEDULE=${SYNC_SCHEDULE:-0 12,20 * * *}  # 12pm and 8pm daily
      - AWS_REGION=${AWS_REGION}
      - ORCHESTRATOR_ENDPOINT=${ORCHESTRATOR_ENDPOINT}
    
    logging:
      driver: awslogs
      options:
        awslogs-group: /ecs/canvas-scraper/scheduler
        awslogs-region: ${AWS_REGION}
        awslogs-stream-prefix: scheduler
    
    healthCheck:
      command: ["python", "/app/healthcheck.py", "--service", "scheduler"]
      interval: 60s
      timeout: 10s
      retries: 3
      startPeriod: 30s
    
    # Single instance scheduler
    deploy:
      replicas: 1
      resources:
        reservations:
          cpus: '0.1'
          memory: 256M
        limits:
          cpus: '0.25'
          memory: 512M

# =====================================================
# SHARED CONFIGURATIONS
# =====================================================
networks:
  canvas-scraper-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  app-logs:
    driver: local
  temp-files:
    driver: local

# =====================================================
# DEVELOPMENT OVERRIDES
# =====================================================
x-development-overrides: &development-overrides
  environment:
    - DEBUG=true
    - LOG_LEVEL=DEBUG
  volumes:
    - ./src:/app/src:ro
    - ./config:/app/config:ro
    - app-logs:/app/logs

# Apply development overrides when ENVIRONMENT=development
x-conditional-development:
  canvas-orchestrator:
    <<: *development-overrides
    ports:
      - "8080:8080"  # Expose for debugging
  
  assessment-processor:
    <<: *development-overrides
    deploy:
      replicas: 1  # Single instance for debugging
  
  notification-service:
    <<: *development-overrides
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - EMAIL_PROVIDER=console  # Console output for dev

# =====================================================
# PRODUCTION OPTIMIZATIONS
# =====================================================
x-production-overrides: &production-overrides
  logging:
    options:
      max-size: "10m"
      max-file: "3"
  
  deploy:
    restart_policy:
      condition: on-failure
      delay: 30s
      max_attempts: 3
      window: 120s
  
  # Security optimizations
  security_opt:
    - no-new-privileges:true
  
  # Read-only root filesystem
  read_only: true
  tmpfs:
    - /tmp
    - /app/logs

# =====================================================
# MONITORING AND OBSERVABILITY
# =====================================================
x-monitoring: &monitoring
  logging:
    driver: awslogs
    options:
      awslogs-create-group: "true"
      awslogs-multiline-pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}'
  
  # Custom metrics
  labels:
    com.canvas-scraper.service: "true"
    com.canvas-scraper.monitoring: "cloudwatch"
    com.canvas-scraper.version: "${IMAGE_TAG:-latest}"

# =====================================================
# AUTO-SCALING CONFIGURATIONS
# =====================================================
x-autoscaling:
  assessment-processor:
    min_capacity: 2
    max_capacity: 10
    target_tracking_scaling_policies:
      - metric_type: CPUUtilization
        target_value: 75.0
        scale_out_cooldown: 300s
        scale_in_cooldown: 300s
      - metric_type: MemoryUtilization
        target_value: 80.0
        scale_out_cooldown: 300s
        scale_in_cooldown: 600s
      - metric_type: SQSQueueLength
        target_value: 20.0
        scale_out_cooldown: 60s
        scale_in_cooldown: 300s
  
  notification-service:
    min_capacity: 1
    max_capacity: 3
    target_tracking_scaling_policies:
      - metric_type: CPUUtilization
        target_value: 60.0
        scale_out_cooldown: 300s
        scale_in_cooldown: 600s

# =====================================================
# SECURITY CONFIGURATIONS
# =====================================================
x-security: &security
  # Run as non-root user
  user: "1000:1000"
  
  # Security options
  security_opt:
    - no-new-privileges:true
    - apparmor:unconfined
  
  # Capabilities
  cap_drop:
    - ALL
  cap_add:
    - NET_BIND_SERVICE
  
  # Read-only root filesystem with writable volumes
  read_only: true
  tmpfs:
    - /tmp:size=100M,mode=1777
    - /var/log:size=50M,mode=0755

# =====================================================
# HEALTH CHECK CONFIGURATIONS
# =====================================================
x-healthcheck: &healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

# =====================================================
# ENVIRONMENT-SPECIFIC CONFIGURATIONS
# =====================================================
# Use with: docker-compose --env-file .env.production -f ecs-services.yml up
x-env-production:
  ENVIRONMENT: production
  LOG_LEVEL: INFO
  DEBUG: false
  MAX_CONCURRENT_ASSESSMENTS: 10
  CHUNK_SIZE: 1000
  CHUNK_OVERLAP: 200
  REDIS_MAX_CONNECTIONS: 20

x-env-staging:
  ENVIRONMENT: staging
  LOG_LEVEL: DEBUG
  DEBUG: true
  MAX_CONCURRENT_ASSESSMENTS: 3
  CHUNK_SIZE: 500
  CHUNK_OVERLAP: 100
  REDIS_MAX_CONNECTIONS: 10

x-env-development:
  ENVIRONMENT: development
  LOG_LEVEL: DEBUG
  DEBUG: true
  MAX_CONCURRENT_ASSESSMENTS: 1
  CHUNK_SIZE: 200
  CHUNK_OVERLAP: 50
  REDIS_MAX_CONNECTIONS: 5