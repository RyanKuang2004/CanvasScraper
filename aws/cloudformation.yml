AWSTemplateFormatVersion: '2010-09-09'
Description: 'Canvas Scraper Infrastructure - EC2, Security Groups, and IAM'

Parameters:
  EnvironmentName:
    Description: Environment name prefix for resources
    Type: String
    Default: canvas-scraper
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9-]*'
    
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues: [t3.micro, t3.small, t3.medium, t2.micro, t2.small, t2.medium]
    
  KeyPairName:
    Description: Name of existing EC2 KeyPair for SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
    
  AllowedCIDR:
    Description: CIDR block allowed to access the instance (your IP)
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    
  CanvasAPIToken:
    Description: Canvas API Token (will be stored in SSM Parameter Store)
    Type: String
    NoEcho: true
    MinLength: 10

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI
    us-west-2:
      AMI: ami-0841edc20334f9287  # Amazon Linux 2 AMI
    eu-west-1:
      AMI: ami-08ca3fed11864d6bb  # Amazon Linux 2 AMI
    ap-southeast-2:
      AMI: ami-0567f647e75c7bc05  # Amazon Linux 2 AMI

Resources:
  # VPC and Networking
  CanvasVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CanvasVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-subnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref CanvasVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CanvasVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Groups
  CanvasScraperSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-sg
      GroupDescription: Security group for Canvas Scraper EC2 instance
      VpcId: !Ref CanvasVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedCIDR
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedCIDR
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AllowedCIDR
          Description: HTTPS access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-security-group

  # IAM Role for EC2 Instance
  CanvasScraperRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ec2-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentName}/*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/ec2/${EnvironmentName}*'

  CanvasScraperInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${EnvironmentName}-instance-profile
      Roles:
        - !Ref CanvasScraperRole

  # SSM Parameter for secure token storage
  CanvasAPITokenParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${EnvironmentName}/canvas-api-token
      Type: SecureString
      Value: !Ref CanvasAPIToken
      Description: Canvas API Token for scraper application

  # EC2 Instance
  CanvasScraperInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref CanvasScraperSecurityGroup
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref CanvasScraperInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          
          # Install Docker
          amazon-linux-extras install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Install CloudWatch agent
          yum install -y amazon-cloudwatch-agent
          
          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          
          # Create application directory
          mkdir -p /home/ec2-user/canvas-scraper
          chown ec2-user:ec2-user /home/ec2-user/canvas-scraper
          
          # Create environment file with SSM parameter
          echo "CANVAS_API_TOKEN=$(aws ssm get-parameter --name /${EnvironmentName}/canvas-api-token --with-decryption --query Parameter.Value --output text --region ${AWS::Region})" > /home/ec2-user/canvas-scraper/.env
          chown ec2-user:ec2-user /home/ec2-user/canvas-scraper/.env
          chmod 600 /home/ec2-user/canvas-scraper/.env
          
          # Signal completion
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource CanvasScraperInstance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-instance
        - Key: Environment
          Value: !Ref EnvironmentName
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M

  # CloudWatch Log Group
  CanvasScraperLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ec2/${EnvironmentName}
      RetentionInDays: 14

Outputs:
  InstanceId:
    Description: Instance ID of the Canvas Scraper EC2 instance
    Value: !Ref CanvasScraperInstance
    Export:
      Name: !Sub ${EnvironmentName}-instance-id

  InstancePublicIP:
    Description: Public IP address of the Canvas Scraper instance
    Value: !GetAtt CanvasScraperInstance.PublicIp
    Export:
      Name: !Sub ${EnvironmentName}-public-ip

  InstancePrivateIP:
    Description: Private IP address of the Canvas Scraper instance
    Value: !GetAtt CanvasScraperInstance.PrivateIp
    Export:
      Name: !Sub ${EnvironmentName}-private-ip

  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub ssh -i ~/.ssh/${KeyPairName}.pem ec2-user@${CanvasScraperInstance.PublicIp}

  VPCId:
    Description: VPC ID
    Value: !Ref CanvasVPC
    Export:
      Name: !Sub ${EnvironmentName}-vpc-id

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref CanvasScraperSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-sg-id